generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_DB_PRISMA_URL")
  directUrl = env("POSTGRES_DB_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_DB_URL_NON_POOLING")
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(USER)
  knowledgeBases KnowledgeBase[]
}

model KnowledgeBase {
  id            String       @id @default(cuid())
  name          String
  description   String
  isPublic      Boolean      @map("is_public")
  format        String       @default("default_format")
  userId        String       @map("user_id")
  createdAt     DateTime     @default(now())
  user          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatHistories ChatHistory[]
  documents     Document[]
}

model ChatHistory {
  id              String         @id @default(cuid())
  knowledgeBaseId String         @map("knowledge_base_id")
  conversation    Json[]
  createdAt       DateTime       @default(now())
  knowledgeBase   KnowledgeBase  @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
}

model Document {
  id              String         @id @default(cuid())
  knowledgeBaseId String         @map("knowledge_base_id")
  name            String
  path            String         // Path to the document storage
  chromaRef       String         // Reference ID in Chroma DB
  createdAt       DateTime       @default(now())
  knowledgeBase   KnowledgeBase  @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
