generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model FormSubmission {
  id        String    @id @default(cuid())
  email     String
  name      String 
  company   String 
  employees String
  createdAt DateTime  @default(now())
}

model User {
  id                     String                    @id @default(cuid())
  name                   String?
  email                  String?                   @unique
  emailVerified          DateTime?
  image                  String?
  accounts               Account[]
  sessions               Session[]
  role                   Role                      @default(USER)
  goals                  Goal[]                    @relation("UserGoals")
  progress               Progress[]                @relation("UserProgress")
}

model Goal {
  id          String   @id @default(cuid())
  goal        String
  deadline    DateTime
  steps       String
  createdAt   DateTime @default(now())
  userId      String
  user        User     @relation("UserGoals", fields: [userId], references: [id])
}

model Progress {
  id                String   @id @default(cuid())
  goal              String
  currentProgress   String
  challenges        String
  createdAt         DateTime @default(now())
  userId            String
  user              User     @relation("UserProgress", fields: [userId], references: [id])
}


model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user               User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String     @id @default(cuid())
  sessionToken String     @unique @map("session_token")
  userId       String     @map("user_id")
  expires      DateTime
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int        @id @default(autoincrement())
  identifier String
  token      String     @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
