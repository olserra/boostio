generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_DB_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_DB_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_DB_URL_NON_POOLING") // used for migrations
}

model ChatHistory {
  id         String   @id @default(cuid())
  userId     String   @map("user_id") @unique
  conversation Json[]
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  queries       Query []
  accounts      Account[]
  sessions      Session[]
  prompts       Prompt[]
  role          Role      @default(USER)
  chatHistory   ChatHistory?
}

model Prompt {
  id        Int     @default(autoincrement()) @id
  userId    String  @map("user_id")
  prompt    String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Query {
  id        String  @id @default(cuid())
  userId    String  @map("user_id")
  query     String
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}
